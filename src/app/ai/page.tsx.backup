'use client';

import { useState, useRef, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import {
  Send, Paperclip, Image as ImageIcon, FileText,
  ArrowLeft, MoreVertical, Copy, RefreshCw,
  User, Bot, Sparkles, Camera, Upload
} from 'lucide-react';
import { Button, Card, Input } from '@/components/ui';
import { useAuth } from '@/contexts/AuthContext';
import { chatService, type ChatSession, type ChatMessage } from '@/lib/chat';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  files?: Array<{
    name: string;
    type: string;
    url: string;
  }>;
}

export default function AIPage() {
  const { user } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  const sessionId = searchParams.get('session');

  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [attachedFiles, setAttachedFiles] = useState<File[]>([]);
  const [currentSession, setCurrentSession] = useState<ChatSession | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleFileSelect = (files: FileList) => {
    const validFiles = Array.from(files).filter(file => 
      file.type.startsWith('image/') || file.type === 'application/pdf'
    );
    setAttachedFiles(prev => [...prev, ...validFiles]);
  };

  const removeAttachedFile = (index: number) => {
    setAttachedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() && attachedFiles.length === 0) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue.trim(),
      timestamp: new Date(),
      files: attachedFiles.map(file => ({
        name: file.name,
        type: file.type,
        url: URL.createObjectURL(file)
      }))
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setAttachedFiles([]);
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: `Merhaba! Ben Sarai AI asistanÄ±nÄ±m. ${inputValue ? `"${inputValue}" hakkÄ±nda size yardÄ±mcÄ± olmaya hazÄ±rÄ±m.` : 'YÃ¼klediÄŸiniz dosyalarÄ± analiz ediyorum.'} 

Size nasÄ±l yardÄ±mcÄ± olabilirim?

ðŸ“š **Yapabileceklerim:**
- YKS sorularÄ±nÄ± adÄ±m adÄ±m Ã§Ã¶zebilirim
- Konu anlatÄ±mlarÄ± yapabilirim  
- Ã‡alÄ±ÅŸma planÄ± oluÅŸturabilirim
- PDF'leri analiz edebilirim
- FotoÄŸraf sorularÄ±nÄ± Ã§Ã¶zebilirim

Hangi konuda yardÄ±ma ihtiyacÄ±nÄ±z var?`,
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, aiMessage]);
      setIsLoading(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const suggestedQuestions = [
    "Matematik integral konusunu anlatÄ±r mÄ±sÄ±n?",
    "Fizik kuvvet sorularÄ± iÃ§in ipuÃ§larÄ± ver",
    "YKS iÃ§in Ã§alÄ±ÅŸma planÄ± oluÅŸtur",
    "Kimya mol kavramÄ±nÄ± aÃ§Ä±kla"
  ];

  return (
    <div className="min-h-screen bg-background flex flex-col">
      {/* Header */}
      <header className="border-b border-border/30 bg-surface/30 backdrop-blur-xl p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.back()}
              leftIcon={<ArrowLeft className="w-4 h-4" />}
            >
              Geri
            </Button>
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-xl bg-gradient-primary flex items-center justify-center">
                <Bot className="w-5 h-5 text-white" />
              </div>
              <div>
                <h1 className="text-lg font-bold text-foreground">Sarai AI</h1>
                <p className="text-xs text-foreground-muted">YKS AsistanÄ±nÄ±z</p>
              </div>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="sm">
              <MoreVertical className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </header>

      {/* Messages Area */}
      <div className="flex-1 overflow-auto p-6">
        <div className="max-w-4xl mx-auto">
          {messages.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-24 h-24 rounded-3xl bg-gradient-primary flex items-center justify-center mx-auto mb-6">
                <Sparkles className="w-12 h-12 text-white" />
              </div>
              <h2 className="text-3xl font-bold text-foreground mb-4">
                Merhaba {user?.user_metadata?.full_name?.split(' ')[0] || 'Ã–ÄŸrenci'}! ðŸ‘‹
              </h2>
              <p className="text-xl text-foreground-muted mb-8 max-w-2xl mx-auto">
                Ben senin YKS yolculuÄŸundaki AI asistanÄ±nÄ±m. Soru sor, fotoÄŸraf yÃ¼kle, 
                PDF analiz et - her konuda yardÄ±mcÄ± olmaya hazÄ±rÄ±m!
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-2xl mx-auto">
                {suggestedQuestions.map((question, index) => (
                  <Card 
                    key={index}
                    variant="glass" 
                    className="p-4 cursor-pointer hover:bg-surface-hover transition-colors"
                    onClick={() => setInputValue(question)}
                  >
                    <p className="text-sm text-foreground">{question}</p>
                  </Card>
                ))}
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex gap-4 ${
                    message.type === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  {message.type === 'ai' && (
                    <div className="w-8 h-8 rounded-lg bg-gradient-primary flex items-center justify-center flex-shrink-0">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                  )}
                  
                  <div className={`max-w-3xl ${message.type === 'user' ? 'order-1' : 'order-2'}`}>
                    <Card
                      variant={message.type === 'user' ? 'gradient' : 'glass'}
                      className={message.type === 'user' ? 'text-white' : ''}
                    >
                      <div className="p-4">
                        {message.files && message.files.length > 0 && (
                          <div className="mb-3 space-y-2">
                            {message.files.map((file, index) => (
                              <div key={index} className="flex items-center gap-2 p-2 bg-white/10 rounded-lg">
                                {file.type.startsWith('image/') ? (
                                  <ImageIcon className="w-4 h-4" />
                                ) : (
                                  <FileText className="w-4 h-4" />
                                )}
                                <span className="text-sm truncate">{file.name}</span>
                              </div>
                            ))}
                          </div>
                        )}
                        <div
                          className="prose prose-invert max-w-none text-sm leading-relaxed"
                          style={{ color: message.type === 'user' ? 'white' : 'inherit' }}
                        >
                          {message.content.split('\n').map((line, index) => (
                            <p key={index} className={index > 0 ? 'mt-2' : ''}>{line}</p>
                          ))}
                        </div>
                      </div>
                    </Card>
                    
                    <div className={`flex items-center gap-2 mt-2 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                      <span className="text-xs text-foreground-muted">
                        {message.timestamp.toLocaleTimeString('tr-TR', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </span>
                      {message.type === 'ai' && (
                        <>
                          <Button variant="ghost" size="sm" className="h-auto p-1">
                            <Copy className="w-3 h-3" />
                          </Button>
                          <Button variant="ghost" size="sm" className="h-auto p-1">
                            <RefreshCw className="w-3 h-3" />
                          </Button>
                        </>
                      )}
                    </div>
                  </div>
                  
                  {message.type === 'user' && (
                    <div className="w-8 h-8 rounded-lg bg-gradient-success flex items-center justify-center flex-shrink-0">
                      <User className="w-4 h-4 text-white" />
                    </div>
                  )}
                </div>
              ))}
              
              {isLoading && (
                <div className="flex gap-4 justify-start">
                  <div className="w-8 h-8 rounded-lg bg-gradient-primary flex items-center justify-center flex-shrink-0">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                  <Card variant="glass">
                    <div className="p-4 flex items-center gap-3">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-primary-solid rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-primary-solid rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                        <div className="w-2 h-2 bg-primary-solid rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                      </div>
                      <span className="text-sm text-foreground-muted">AI dÃ¼ÅŸÃ¼nÃ¼yor...</span>
                    </div>
                  </Card>
                </div>
              )}
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input Area */}
      <div className="border-t border-border/30 bg-surface/30 backdrop-blur-xl p-6">
        <div className="max-w-4xl mx-auto">
          {/* Attached Files */}
          {attachedFiles.length > 0 && (
            <div className="mb-4 flex flex-wrap gap-2">
              {attachedFiles.map((file, index) => (
                <div key={index} className="flex items-center gap-2 bg-surface px-3 py-2 rounded-lg">
                  {file.type.startsWith('image/') ? (
                    <ImageIcon className="w-4 h-4" />
                  ) : (
                    <FileText className="w-4 h-4" />
                  )}
                  <span className="text-sm truncate max-w-32">{file.name}</span>
                  <button
                    onClick={() => removeAttachedFile(index)}
                    className="text-foreground-muted hover:text-error-solid transition-colors"
                  >
                    Ã—
                  </button>
                </div>
              ))}
            </div>
          )}

          <div className="flex items-end gap-3">
            <div className="flex gap-2">
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*,.pdf"
                multiple
                onChange={(e) => e.target.files && handleFileSelect(e.target.files)}
                className="hidden"
              />
              
              <Button
                variant="ghost"
                size="md"
                onClick={() => fileInputRef.current?.click()}
                className="rounded-full"
              >
                <Paperclip className="w-5 h-5" />
              </Button>
              
              <Button
                variant="ghost"
                size="md"
                onClick={() => router.push('/solve')}
                className="rounded-full"
              >
                <Camera className="w-5 h-5" />
              </Button>
            </div>

            <div className="flex-1 relative">
              <textarea
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Sarai AI'ya soru sor... (Enter ile gÃ¶nder)"
                className="w-full px-4 py-3 pr-12 bg-surface border border-border rounded-xl focus:ring-2 focus:ring-primary-solid/30 focus:border-primary-solid resize-none text-foreground placeholder:text-foreground-muted min-h-[48px] max-h-32"
                rows={1}
                style={{ 
                  height: 'auto',
                  minHeight: '48px',
                }}
                disabled={isLoading}
              />
              <Button
                variant="gradient"
                size="sm"
                onClick={handleSendMessage}
                disabled={(!inputValue.trim() && attachedFiles.length === 0) || isLoading}
                className="absolute right-2 top-1/2 -translate-y-1/2 rounded-lg"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
          
          <p className="text-xs text-foreground-muted text-center mt-3">
            AI yanÄ±tlarÄ± hata iÃ§erebilir. Ã–nemli konularda doÄŸrulama yapÄ±n.
          </p>
        </div>
      </div>
    </div>
  );
}